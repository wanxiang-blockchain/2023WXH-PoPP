// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CreatedBase extends ethereum.Event {
  get params(): CreatedBase__Params {
    return new CreatedBase__Params(this);
  }
}

export class CreatedBase__Params {
  _event: CreatedBase;

  constructor(event: CreatedBase) {
    this._event = event;
  }

  get planetId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get baseId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class PlanetBase__authCheckResult {
  value0: boolean;
  value1: boolean;

  constructor(value0: boolean, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }

  getValue0(): boolean {
    return this.value0;
  }

  getValue1(): boolean {
    return this.value1;
  }
}

export class PlanetBase__baseInfoResultValue0Struct extends ethereum.Tuple {
  get planetProfileId(): BigInt {
    return this[0].toBigInt();
  }

  get name(): string {
    return this[1].toString();
  }

  get imageURI(): string {
    return this[2].toString();
  }

  get joinNft(): Address {
    return this[3].toAddress();
  }

  get postNft(): Address {
    return this[4].toAddress();
  }
}

export class PlanetBase__createPlanetBaseInputVarsStruct extends ethereum.Tuple {
  get planetProfileId(): BigInt {
    return this[0].toBigInt();
  }

  get name(): string {
    return this[1].toString();
  }

  get imageURI(): string {
    return this[2].toString();
  }

  get joinNft(): Address {
    return this[3].toAddress();
  }

  get postNft(): Address {
    return this[4].toAddress();
  }
}

export class PlanetBase extends ethereum.SmartContract {
  static bind(address: Address): PlanetBase {
    return new PlanetBase("PlanetBase", address);
  }

  PLANET_PROFILE(): Address {
    let result = super.call("PLANET_PROFILE", "PLANET_PROFILE():(address)", []);

    return result[0].toAddress();
  }

  try_PLANET_PROFILE(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "PLANET_PROFILE",
      "PLANET_PROFILE():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  POPP_HUB(): Address {
    let result = super.call("POPP_HUB", "POPP_HUB():(address)", []);

    return result[0].toAddress();
  }

  try_POPP_HUB(): ethereum.CallResult<Address> {
    let result = super.tryCall("POPP_HUB", "POPP_HUB():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  authCheck(_addr: Address, baseId: BigInt): PlanetBase__authCheckResult {
    let result = super.call(
      "authCheck",
      "authCheck(address,uint256):(bool,bool)",
      [
        ethereum.Value.fromAddress(_addr),
        ethereum.Value.fromUnsignedBigInt(baseId)
      ]
    );

    return new PlanetBase__authCheckResult(
      result[0].toBoolean(),
      result[1].toBoolean()
    );
  }

  try_authCheck(
    _addr: Address,
    baseId: BigInt
  ): ethereum.CallResult<PlanetBase__authCheckResult> {
    let result = super.tryCall(
      "authCheck",
      "authCheck(address,uint256):(bool,bool)",
      [
        ethereum.Value.fromAddress(_addr),
        ethereum.Value.fromUnsignedBigInt(baseId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PlanetBase__authCheckResult(
        value[0].toBoolean(),
        value[1].toBoolean()
      )
    );
  }

  baseInfo(baseId: BigInt): PlanetBase__baseInfoResultValue0Struct {
    let result = super.call(
      "baseInfo",
      "baseInfo(uint256):((uint256,string,string,address,address))",
      [ethereum.Value.fromUnsignedBigInt(baseId)]
    );

    return changetype<PlanetBase__baseInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_baseInfo(
    baseId: BigInt
  ): ethereum.CallResult<PlanetBase__baseInfoResultValue0Struct> {
    let result = super.tryCall(
      "baseInfo",
      "baseInfo(uint256):((uint256,string,string,address,address))",
      [ethereum.Value.fromUnsignedBigInt(baseId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PlanetBase__baseInfoResultValue0Struct>(value[0].toTuple())
    );
  }

  countBaseOfPlanet(param0: BigInt): BigInt {
    let result = super.call(
      "countBaseOfPlanet",
      "countBaseOfPlanet(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_countBaseOfPlanet(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "countBaseOfPlanet",
      "countBaseOfPlanet(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createPlanetBase(vars: PlanetBase__createPlanetBaseInputVarsStruct): BigInt {
    let result = super.call(
      "createPlanetBase",
      "createPlanetBase((uint256,string,string,address,address)):(uint256)",
      [ethereum.Value.fromTuple(vars)]
    );

    return result[0].toBigInt();
  }

  try_createPlanetBase(
    vars: PlanetBase__createPlanetBaseInputVarsStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createPlanetBase",
      "createPlanetBase((uint256,string,string,address,address)):(uint256)",
      [ethereum.Value.fromTuple(vars)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get poppHubAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get planetProfile(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreatePlanetBaseCall extends ethereum.Call {
  get inputs(): CreatePlanetBaseCall__Inputs {
    return new CreatePlanetBaseCall__Inputs(this);
  }

  get outputs(): CreatePlanetBaseCall__Outputs {
    return new CreatePlanetBaseCall__Outputs(this);
  }
}

export class CreatePlanetBaseCall__Inputs {
  _call: CreatePlanetBaseCall;

  constructor(call: CreatePlanetBaseCall) {
    this._call = call;
  }

  get vars(): CreatePlanetBaseCallVarsStruct {
    return changetype<CreatePlanetBaseCallVarsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CreatePlanetBaseCall__Outputs {
  _call: CreatePlanetBaseCall;

  constructor(call: CreatePlanetBaseCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreatePlanetBaseCallVarsStruct extends ethereum.Tuple {
  get planetProfileId(): BigInt {
    return this[0].toBigInt();
  }

  get name(): string {
    return this[1].toString();
  }

  get imageURI(): string {
    return this[2].toString();
  }

  get joinNft(): Address {
    return this[3].toAddress();
  }

  get postNft(): Address {
    return this[4].toAddress();
  }
}

export class RemovePlanetBaseCall extends ethereum.Call {
  get inputs(): RemovePlanetBaseCall__Inputs {
    return new RemovePlanetBaseCall__Inputs(this);
  }

  get outputs(): RemovePlanetBaseCall__Outputs {
    return new RemovePlanetBaseCall__Outputs(this);
  }
}

export class RemovePlanetBaseCall__Inputs {
  _call: RemovePlanetBaseCall;

  constructor(call: RemovePlanetBaseCall) {
    this._call = call;
  }

  get planetProfileId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get baseId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RemovePlanetBaseCall__Outputs {
  _call: RemovePlanetBaseCall;

  constructor(call: RemovePlanetBaseCall) {
    this._call = call;
  }
}

export class SetAuthCall extends ethereum.Call {
  get inputs(): SetAuthCall__Inputs {
    return new SetAuthCall__Inputs(this);
  }

  get outputs(): SetAuthCall__Outputs {
    return new SetAuthCall__Outputs(this);
  }
}

export class SetAuthCall__Inputs {
  _call: SetAuthCall;

  constructor(call: SetAuthCall) {
    this._call = call;
  }

  get baseId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get joinNft(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get postNft(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetAuthCall__Outputs {
  _call: SetAuthCall;

  constructor(call: SetAuthCall) {
    this._call = call;
  }
}
