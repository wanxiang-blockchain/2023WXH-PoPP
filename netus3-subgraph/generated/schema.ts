// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ProfileCreateInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProfileCreateInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ProfileCreateInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ProfileCreateInfo", id.toString(), this);
    }
  }

  static load(id: string): ProfileCreateInfo | null {
    return changetype<ProfileCreateInfo | null>(
      store.get("ProfileCreateInfo", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get profileId(): BigInt {
    let value = this.get("profileId");
    return value!.toBigInt();
  }

  set profileId(value: BigInt) {
    this.set("profileId", Value.fromBigInt(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value!.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get followModule(): Bytes {
    let value = this.get("followModule");
    return value!.toBytes();
  }

  set followModule(value: Bytes) {
    this.set("followModule", Value.fromBytes(value));
  }

  get followModuleReturnData(): Bytes {
    let value = this.get("followModuleReturnData");
    return value!.toBytes();
  }

  set followModuleReturnData(value: Bytes) {
    this.set("followModuleReturnData", Value.fromBytes(value));
  }

  get followNFTURI(): string {
    let value = this.get("followNFTURI");
    return value!.toString();
  }

  set followNFTURI(value: string) {
    this.set("followNFTURI", Value.fromString(value));
  }

  get handle(): string {
    let value = this.get("handle");
    return value!.toString();
  }

  set handle(value: string) {
    this.set("handle", Value.fromString(value));
  }

  get imageURI(): string {
    let value = this.get("imageURI");
    return value!.toString();
  }

  set imageURI(value: string) {
    this.set("imageURI", Value.fromString(value));
  }

  get profileType(): string {
    let value = this.get("profileType");
    return value!.toString();
  }

  set profileType(value: string) {
    this.set("profileType", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get crateAt(): BigInt {
    let value = this.get("crateAt");
    return value!.toBigInt();
  }

  set crateAt(value: BigInt) {
    this.set("crateAt", Value.fromBigInt(value));
  }

  get planetId(): BigInt {
    let value = this.get("planetId");
    return value!.toBigInt();
  }

  set planetId(value: BigInt) {
    this.set("planetId", Value.fromBigInt(value));
  }

  get baseName(): string {
    let value = this.get("baseName");
    return value!.toString();
  }

  set baseName(value: string) {
    this.set("baseName", Value.fromString(value));
  }
}

export class FollowInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FollowInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FollowInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FollowInfo", id.toString(), this);
    }
  }

  static load(id: string): FollowInfo | null {
    return changetype<FollowInfo | null>(store.get("FollowInfo", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get followModuleData(): Bytes {
    let value = this.get("followModuleData");
    return value!.toBytes();
  }

  set followModuleData(value: Bytes) {
    this.set("followModuleData", Value.fromBytes(value));
  }

  get profileId(): BigInt {
    let value = this.get("profileId");
    return value!.toBigInt();
  }

  set profileId(value: BigInt) {
    this.set("profileId", Value.fromBigInt(value));
  }

  get follower(): Bytes {
    let value = this.get("follower");
    return value!.toBytes();
  }

  set follower(value: Bytes) {
    this.set("follower", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get crateAt(): BigInt {
    let value = this.get("crateAt");
    return value!.toBigInt();
  }

  set crateAt(value: BigInt) {
    this.set("crateAt", Value.fromBigInt(value));
  }

  get isProhibitionAddress(): boolean {
    let value = this.get("isProhibitionAddress");
    return value!.toBoolean();
  }

  set isProhibitionAddress(value: boolean) {
    this.set("isProhibitionAddress", Value.fromBoolean(value));
  }

  get isProhibitionProfileId(): boolean {
    let value = this.get("isProhibitionProfileId");
    return value!.toBoolean();
  }

  set isProhibitionProfileId(value: boolean) {
    this.set("isProhibitionProfileId", Value.fromBoolean(value));
  }

  get isKickOut(): boolean {
    let value = this.get("isKickOut");
    return value!.toBoolean();
  }

  set isKickOut(value: boolean) {
    this.set("isKickOut", Value.fromBoolean(value));
  }
}

export class ContentInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ContentInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ContentInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ContentInfo", id.toString(), this);
    }
  }

  static load(id: string): ContentInfo | null {
    return changetype<ContentInfo | null>(store.get("ContentInfo", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get baseProfileId(): BigInt {
    let value = this.get("baseProfileId");
    return value!.toBigInt();
  }

  set baseProfileId(value: BigInt) {
    this.set("baseProfileId", Value.fromBigInt(value));
  }

  get collectModule(): Bytes {
    let value = this.get("collectModule");
    return value!.toBytes();
  }

  set collectModule(value: Bytes) {
    this.set("collectModule", Value.fromBytes(value));
  }

  get collectModuleReturnData(): Bytes {
    let value = this.get("collectModuleReturnData");
    return value!.toBytes();
  }

  set collectModuleReturnData(value: Bytes) {
    this.set("collectModuleReturnData", Value.fromBytes(value));
  }

  get contentURI(): string {
    let value = this.get("contentURI");
    return value!.toString();
  }

  set contentURI(value: string) {
    this.set("contentURI", Value.fromString(value));
  }

  get planetProfileId(): BigInt {
    let value = this.get("planetProfileId");
    return value!.toBigInt();
  }

  set planetProfileId(value: BigInt) {
    this.set("planetProfileId", Value.fromBigInt(value));
  }

  get profileId(): BigInt {
    let value = this.get("profileId");
    return value!.toBigInt();
  }

  set profileId(value: BigInt) {
    this.set("profileId", Value.fromBigInt(value));
  }

  get pubId(): BigInt {
    let value = this.get("pubId");
    return value!.toBigInt();
  }

  set pubId(value: BigInt) {
    this.set("pubId", Value.fromBigInt(value));
  }

  get referenceModule(): Bytes {
    let value = this.get("referenceModule");
    return value!.toBytes();
  }

  set referenceModule(value: Bytes) {
    this.set("referenceModule", Value.fromBytes(value));
  }

  get referenceModuleReturnData(): Bytes {
    let value = this.get("referenceModuleReturnData");
    return value!.toBytes();
  }

  set referenceModuleReturnData(value: Bytes) {
    this.set("referenceModuleReturnData", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get crateAt(): BigInt {
    let value = this.get("crateAt");
    return value!.toBigInt();
  }

  set crateAt(value: BigInt) {
    this.set("crateAt", Value.fromBigInt(value));
  }

  get profileIdPointed(): BigInt {
    let value = this.get("profileIdPointed");
    return value!.toBigInt();
  }

  set profileIdPointed(value: BigInt) {
    this.set("profileIdPointed", Value.fromBigInt(value));
  }

  get pubIdPointed(): BigInt {
    let value = this.get("pubIdPointed");
    return value!.toBigInt();
  }

  set pubIdPointed(value: BigInt) {
    this.set("pubIdPointed", Value.fromBigInt(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }
}
